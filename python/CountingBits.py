# Дано целое число n, верните массив ans длиной n + 1, такой что для каждого i (0 <= i <= n), ans[i] будет равняться количеству единиц в двоичном представлении числа i.

"""
Input: num = 5
Output: [0,1,1,2,1,2]
"""

from typing import List

class Solution:
    def countBits(self, num: int) -> List[int]:
        # Создайте массив ans длиной n + 1, заполненный нулями. 
        # Этот массив будет содержать количество единиц в двоичном представлении каждого числа от 0 до n.
        ans = [0] * (num + 1)

        # Пройдите в цикле по всем числам от 1 до n. 
        # Для каждого числа x используйте битовую операцию x & (x - 1), чтобы убрать последнюю установленную биту, и добавьте 1 к значению ans для этого результата. 
        # Это количество единиц в двоичном представлении числа x.
        for x in range(1, num + 1):
            ans[x] = ans[x & (x - 1)] + 1
        return ans

if __name__ == "__main__":
    example = Solution()
    result = example.countBits(num = 5)
    print(result)